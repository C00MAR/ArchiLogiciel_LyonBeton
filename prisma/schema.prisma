generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  PREMIUM
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String               @id @default(cuid())
  name                String
  email               String               @unique
  emailVerified       DateTime?
  image               String?
  passwordHash        String?
  role                Role                 @default(USER)
  twoFactorEnabled    Boolean              @default(false)
  twoFactorSecret     String?
  backupCodes         String[]
  accounts            Account[]
  posts               Post[]
  sessions            Session[]
  passwordResetTokens PasswordResetToken[]
  cart                Cart?
  auditLogs           AuditLog[]
  orders              Order[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  userId  String
  token   String   @unique
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Product {
  id          Int         @id @default(autoincrement())
  title       String
  subtitle    String
  description String
  price       Int         // pour template front, faire l'update plustard
  imgNumber   Int
  identifier  String      @unique
  ref         String      @unique
  stripeProductId String? @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cartItems   CartItem[]
  prices      Price[]
  orderItems  OrderItem[]

  @@index([title])
}

model Price {
  id            Int      @id @default(autoincrement())
  productId     Int
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  stripePriceId String   @unique
  amount        Int
  currency      String   @default("EUR")
  type          String   @default("one_time")
  interval      String?
  isActive      Boolean  @default(true)
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([productId])
  @@index([stripePriceId])
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    String?    @unique
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)

  @@unique([cartId, productId])
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  entity    String
  entityId  String
  adminId   String
  admin     User     @relation(fields: [adminId], references: [id])
  details   Json?
  createdAt DateTime @default(now())

  @@index([adminId])
  @@index([createdAt])
}

model Order {
  id                String      @id @default(cuid())
  userId            String?
  user              User?       @relation(fields: [userId], references: [id])
  stripeSessionId   String      @unique
  stripePaymentId   String?
  total             Int
  status            OrderStatus @default(PENDING)
  customerEmail     String
  customerName      String?
  shippingAddress   Json?
  billingAddress    Json?
  items             OrderItem[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([userId])
  @@index([stripeSessionId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Int
  title     String
  subtitle  String

  @@index([orderId])
  @@index([productId])
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}
